import _PyPacwar
import numpy
import random
import heapq
import math,sys

bestcontenders=[[3]*50,[3, 0, 3, 3, 0, 3, 0, 0, 3, 0, 1, 0, 0, 3, 0, 3, 3, 1, 3, 0, 3, 3, 3, 3, 1, 2, 3, 2, 1, 1, 3, 3, 0, 1, 1, 3, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],
[3, 0, 3, 3, 0, 3, 0, 0, 3, 0, 1, 0, 0, 3, 0, 3, 3, 1, 3, 0, 3, 3, 3, 3, 1, 2, 3, 2, 1, 1, 3, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],
[3, 0, 3, 3, 0, 3, 0, 0, 3, 0, 1, 0, 0, 3, 0, 3, 3, 1, 3, 0, 3, 3, 3, 3, 1, 2, 3, 2, 0, 2, 3, 0, 3, 2, 2, 2, 3, 0, 0, 3, 0, 1, 1, 0, 3, 2, 3, 3, 3, 3],
[3, 0, 3, 3, 0, 3, 0, 0, 3, 0, 1, 0, 0, 3, 0, 3, 3, 1, 3, 0, 3, 3, 3, 3, 1, 2, 3, 2, 0, 2, 3, 0, 3, 2, 2, 2, 3, 0, 1, 0, 0, 3, 1, 2, 1, 1, 3, 3, 3, 3],
[3, 0, 3, 3, 0, 3, 0, 0, 3, 0, 1, 0, 0, 3, 0, 3, 3, 1, 3, 0, 3, 3, 3, 3, 1, 2, 3, 2, 1, 1, 3, 3, 0, 1, 1, 2, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],
[3, 0, 3, 3, 0, 3, 0, 0, 3, 0, 1, 0, 0, 3, 0, 3, 3, 1, 3, 0, 3, 3, 3, 3, 1, 2, 3, 2, 1, 2, 1, 1, 2, 0, 1, 0, 1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],
[3, 0, 3, 3, 0, 3, 0, 0, 3, 0, 1, 0, 0, 3, 0, 3, 3, 1, 3, 0, 3, 3, 3, 3, 1, 2, 3, 2, 1, 2, 2, 0, 1, 2, 3, 3, 3, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],
[3, 0, 3, 3, 0, 3, 0, 0, 3, 0, 1, 0, 0, 3, 0, 3, 3, 1, 3, 0, 3, 3, 3, 3, 1, 2, 3, 2, 1, 1, 3, 3, 0, 1, 1, 0, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],
[3, 0, 3, 3, 0, 3, 0, 0, 3, 0, 1, 0, 0, 3, 0, 3, 3, 1, 3, 0, 3, 3, 3, 3, 1, 2, 3, 2, 1, 2, 0, 0, 3, 2, 2, 2, 3, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],
[3, 0, 3, 3, 0, 3, 0, 0, 3, 0, 1, 0, 0, 3, 0, 3, 3, 1, 3, 0, 3, 3, 3, 3, 1, 2, 3, 2, 1, 2, 2, 2, 2, 2, 3, 3, 1, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],
[3, 0, 3, 3, 0, 3, 0, 0, 3, 0, 1, 0, 0, 3, 0, 3, 3, 1, 3, 0, 3, 3, 3, 3, 1, 2, 3, 2, 1, 2, 0, 0, 1, 2, 1, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],
[3, 0, 3, 3, 0, 3, 0, 0, 3, 0, 1, 0, 0, 3, 0, 3, 3, 1, 3, 0, 3, 3, 3, 3, 1, 2, 3, 2, 1, 2, 0, 1, 2, 2, 2, 0, 3, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],
[3, 0, 3, 3, 0, 3, 0, 0, 3, 0, 1, 0, 0, 3, 0, 3, 3, 1, 3, 0, 3, 3, 3, 3, 1, 2, 3, 2, 1, 1, 3, 3, 0, 1, 1, 1, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],
[3, 0, 3, 3, 0, 3, 0, 0, 3, 0, 1, 0, 0, 3, 0, 3, 3, 1, 3, 0, 3, 3, 3, 3, 1, 2, 3, 2, 1, 2, 0, 2, 1, 2, 3, 1, 3, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],
[3, 0, 3, 3, 0, 3, 0, 0, 3, 0, 1, 0, 0, 3, 0, 3, 3, 1, 3, 0, 3, 3, 3, 3, 1, 2, 3, 2, 1, 1, 3, 3, 0, 2, 1, 0, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],
[3, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],
[3, 0, 3, 3, 0, 3, 0, 0, 3, 0, 1, 0, 0, 3, 0, 3, 3, 1, 3, 0, 3, 3, 3, 3, 1, 2, 3, 2, 2, 2, 2, 2, 2, 3, 3, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],
[3, 0, 3, 3, 0, 3, 0, 0, 3, 0, 1, 0, 0, 3, 0, 3, 3, 1, 3, 0, 3, 3, 3, 3, 1, 2, 3, 2, 1, 1, 3, 3, 2, 3, 3, 3, 2, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],
[3, 0, 3, 3, 0, 3, 0, 0, 3, 0, 1, 0, 0, 3, 0, 3, 3, 1, 3, 0, 3, 3, 3, 3, 1, 2, 3, 2, 1, 2, 3, 3, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],
[3, 0, 3, 3, 0, 3, 0, 0, 3, 0, 1, 0, 0, 3, 0, 3, 3, 1, 3, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],
[3, 0, 3, 3, 0, 3, 0, 0, 1, 1, 3, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],
[3, 0, 3, 3, 0, 3, 0, 0, 3, 0, 1, 0, 0, 3, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],
[3, 0, 3, 3, 0, 3, 0, 0, 3, 0, 1, 0, 0, 3, 0, 3, 0, 3, 0, 0, 3, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],
[3, 0, 3, 3, 0, 3, 0, 0, 2, 1, 1, 1, 1, 2, 3, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
]

firstcontenders=[
	[3, 0, 3, 3, 0, 3, 0, 0, 3, 0, 1, 0, 0, 3, 0, 3, 3, 1, 3, 0, 3, 3, 3, 3, 1, 2, 3, 2, 0, 2, 3, 0, 3, 2, 2, 2, 3, 0, 3, 0, 0, 0, 3, 3, 0, 1, 0, 3, 2, 0],
	[3, 0, 3, 3, 0, 3, 0, 0, 3, 0, 1, 0, 0, 3, 0, 3, 3, 1, 3, 0, 3, 3, 3, 3, 1, 2, 3, 2, 0, 2, 3, 0, 3, 2, 2, 2, 3, 0, 3, 0, 0, 0, 1, 0, 3, 2, 1, 1, 0, 0] ,
	[3, 0, 3, 3, 0, 3, 0, 0, 3, 0, 1, 0, 0, 3, 0, 3, 3, 1, 3, 0, 3, 3, 3, 3, 1, 2, 3, 2, 0, 2, 3, 0, 3, 2, 2, 2, 3, 0, 3, 0, 0, 0, 1, 0, 3, 2, 1, 1, 3, 0] ,
	[3, 0, 3, 3, 0, 3, 0, 0, 3, 0, 1, 0, 0, 3, 0, 3, 3, 1, 3, 0, 3, 3, 3, 3, 1, 2, 3, 2, 0, 2, 3, 0, 3, 2, 2, 2, 3, 0, 3, 0, 0, 0, 1, 0, 3, 2, 1, 3, 3, 1] ,
	[3, 0, 3, 3, 0, 3, 0, 0, 3, 0, 1, 0, 0, 3, 0, 3, 3, 1, 3, 0, 3, 3, 3, 3, 1, 2, 3, 2, 0, 2, 3, 0, 3, 2, 2, 2, 3, 0, 3, 0, 0, 0, 1, 0, 3, 3, 0, 1, 1, 3] ,
	[3, 0, 3, 3, 0, 3, 0, 0, 3, 0, 1, 0, 0, 3, 0, 3, 3, 1, 3, 0, 3, 3, 3, 3, 1, 2, 3, 2, 0, 2, 3, 0, 3, 2, 2, 2, 3, 0, 3, 0, 0, 0, 1, 0, 3, 3, 0, 2, 0, 0] ,
	[3, 0, 3, 3, 0, 3, 0, 0, 3, 0, 1, 0, 0, 3, 0, 3, 3, 1, 3, 0, 3, 3, 3, 3, 1, 2, 3, 2, 0, 2, 3, 0, 3, 2, 2, 2, 3, 0, 3, 0, 0, 0, 1, 0, 3, 3, 1, 0, 1, 3] ,
	[3, 0, 3, 3, 0, 3, 0, 0, 3, 0, 1, 0, 0, 3, 0, 3, 3, 1, 3, 0, 3, 3, 3, 3, 1, 2, 3, 2, 0, 2, 3, 0, 3, 2, 2, 2, 3, 0, 3, 0, 0, 0, 1, 1, 2, 3, 3, 3, 3, 3] ,
	[3, 0, 3, 3, 0, 3, 0, 0, 3, 0, 1, 0, 0, 3, 0, 3, 3, 1, 3, 0, 3, 3, 3, 3, 1, 2, 3, 2, 0, 2, 3, 0, 3, 2, 2, 2, 3, 0, 3, 0, 0, 0, 1, 3, 1, 1, 2, 0, 1, 1] ,
	[3, 0, 3, 3, 0, 3, 0, 0, 3, 0, 1, 0, 0, 3, 0, 3, 3, 1, 3, 0, 3, 3, 3, 3, 1, 2, 3, 2, 0, 2, 3, 0, 3, 2, 2, 2, 3, 0, 3, 0, 0, 0, 1, 3, 1, 2, 1, 2, 2, 0] ,
	[3, 0, 3, 3, 0, 3, 0, 0, 3, 0, 1, 0, 0, 3, 0, 3, 3, 1, 3, 0, 3, 3, 3, 3, 1, 2, 3, 2, 0, 2, 3, 0, 3, 2, 2, 2, 3, 0, 3, 0, 0, 0, 1, 0, 3, 1, 3, 3, 3, 3] ,
	[3, 0, 3, 3, 0, 3, 0, 0, 3, 0, 1, 0, 0, 3, 0, 3, 3, 1, 3, 0, 3, 3, 3, 3, 1, 2, 3, 2, 0, 2, 3, 0, 3, 2, 2, 2, 3, 0, 0, 0, 0, 0, 1, 2, 3, 2, 3, 3, 3, 3] ,
	[3, 0, 3, 3, 0, 3, 0, 0, 3, 0, 1, 0, 0, 3, 0, 3, 3, 1, 3, 0, 3, 3, 3, 3, 1, 2, 3, 2, 0, 2, 3, 0, 3, 2, 2, 2, 3, 0, 0, 0, 0, 0, 3, 1, 3, 3, 3, 3, 3, 3] ,
	[3, 0, 3, 3, 0, 3, 0, 0, 3, 0, 1, 0, 0, 3, 0, 3, 3, 1, 3, 0, 3, 3, 3, 3, 1, 2, 3, 2, 0, 2, 3, 0, 3, 2, 2, 2, 3, 0, 0, 0, 1, 1, 2, 2, 2, 1, 3, 3, 3, 3] ,
	[3, 0, 3, 3, 0, 3, 0, 0, 3, 0, 1, 0, 0, 3, 0, 3, 3, 1, 3, 0, 3, 3, 3, 3, 1, 2, 3, 2, 0, 2, 3, 0, 3, 2, 2, 2, 3, 0, 0, 0, 1, 3, 3, 3, 0, 3, 3, 3, 3, 3] ,
	[3, 0, 3, 3, 0, 3, 0, 0, 3, 0, 1, 0, 0, 3, 0, 3, 3, 1, 3, 0, 3, 3, 3, 3, 1, 2, 3, 2, 0, 2, 3, 0, 3, 2, 2, 2, 3, 0, 0, 0, 2, 1, 1, 1, 2, 1, 3, 3, 3, 3] ,
	[3, 0, 3, 3, 0, 3, 0, 0, 3, 0, 1, 0, 0, 3, 0, 3, 3, 1, 3, 0, 3, 3, 3, 3, 1, 2, 3, 2, 0, 2, 3, 0, 3, 2, 2, 2, 3, 0, 0, 1, 3, 1, 0, 0, 0, 0, 3, 3, 3, 3] ,
	[3, 0, 3, 3, 0, 3, 0, 0, 3, 0, 1, 0, 0, 3, 0, 3, 3, 1, 3, 0, 3, 3, 3, 3, 1, 2, 3, 2, 0, 2, 3, 0, 3, 2, 2, 2, 3, 0, 0, 3, 0, 1, 1, 0, 3, 2, 3, 3, 3, 3] ,
	[3, 0, 3, 3, 0, 3, 0, 0, 3, 0, 1, 0, 0, 3, 0, 3, 3, 1, 3, 0, 3, 3, 3, 3, 1, 2, 3, 2, 0, 2, 3, 0, 3, 2, 2, 2, 3, 0, 0, 3, 1, 1, 2, 1, 1, 2, 3, 3, 3, 3] ,
	[3, 0, 3, 3, 0, 3, 0, 0, 3, 0, 1, 0, 0, 3, 0, 3, 3, 1, 3, 0, 3, 3, 3, 3, 1, 2, 3, 2, 0, 2, 3, 0, 3, 2, 2, 2, 3, 0, 1, 0, 0, 3, 1, 2, 1, 1, 3, 3, 3, 3] ,
	[3, 0, 3, 3, 0, 3, 0, 0, 3, 0, 1, 0, 0, 3, 0, 3, 3, 1, 3, 0, 3, 3, 3, 3, 1, 2, 3, 2, 0, 2, 3, 0, 3, 2, 2, 2, 3, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3] ,
	[3, 0, 3, 3, 0, 3, 0, 0, 3, 0, 1, 0, 0, 3, 0, 3, 3, 1, 3, 0, 3, 3, 3, 3, 1, 2, 3, 2, 2, 2, 2, 2, 2, 3, 3, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3] ,
	[3, 0, 3, 3, 0, 3, 0, 0, 3, 0, 1, 0, 0, 3, 0, 3, 3, 1, 3, 0, 3, 3, 3, 3, 1, 2, 3, 2, 1, 2, 3, 3, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3] ,
	[3, 0, 3, 3, 0, 3, 0, 0, 3, 0, 1, 0, 0, 3, 0, 3, 3, 1, 3, 0, 3, 3, 3, 3, 1, 2, 3, 2, 1, 2, 2, 2, 2, 2, 3, 3, 1, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3] ,
	[3, 0, 3, 3, 0, 3, 0, 0, 3, 0, 1, 0, 0, 3, 0, 3, 3, 1, 3, 0, 3, 3, 3, 3, 1, 2, 3, 2, 1, 1, 3, 3, 2, 3, 3, 3, 2, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3] ,
	[3, 0, 3, 3, 0, 3, 0, 0, 3, 0, 1, 0, 0, 3, 0, 3, 3, 1, 3, 0, 3, 3, 3, 3, 1, 2, 3, 2, 1, 2, 0, 0, 1, 2, 1, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3] ,
	[3, 0, 3, 3, 0, 3, 0, 0, 3, 0, 1, 0, 0, 3, 0, 3, 3, 1, 3, 0, 3, 3, 3, 3, 1, 2, 3, 2, 1, 2, 0, 0, 3, 2, 2, 2, 3, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3] ,
	[3, 0, 3, 3, 0, 3, 0, 0, 3, 0, 1, 0, 0, 3, 0, 3, 3, 1, 3, 0, 3, 3, 3, 3, 1, 2, 3, 2, 1, 2, 0, 1, 2, 2, 2, 0, 3, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],
	[3, 0, 3, 3, 0, 3, 0, 0, 3, 0, 1, 0, 0, 3, 0, 3, 3, 1, 3, 0, 3, 3, 3, 3, 1, 2, 3, 2, 1, 2, 0, 2, 1, 2, 3, 1, 3, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],
	[3, 0, 3, 3, 0, 3, 0, 0, 3, 0, 1, 0, 0, 3, 0, 3, 3, 1, 3, 0, 3, 3, 3, 3, 1, 2, 3, 2, 1, 2, 1, 1, 2, 0, 1, 0, 1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],
	[3, 0, 3, 3, 0, 3, 0, 0, 3, 0, 1, 0, 0, 3, 0, 3, 3, 1, 3, 0, 3, 3, 3, 3, 1, 2, 3, 2, 1, 2, 2, 0, 1, 2, 3, 3, 3, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],
	[3, 0, 3, 3, 0, 3, 0, 0, 3, 0, 1, 0, 0, 3, 0, 3, 3, 1, 3, 0, 3, 3, 3, 3, 1, 2, 3, 2, 1, 1, 3, 3, 0, 1, 1, 0, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],
	[3, 0, 3, 3, 0, 3, 0, 0, 3, 0, 1, 0, 0, 3, 0, 3, 3, 1, 3, 0, 3, 3, 3, 3, 1, 2, 3, 2, 1, 1, 3, 3, 0, 1, 1, 1, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],
	[3, 0, 3, 3, 0, 3, 0, 0, 3, 0, 1, 0, 0, 3, 0, 3, 3, 1, 3, 0, 3, 3, 3, 3, 1, 2, 3, 2, 1, 1, 3, 3, 0, 1, 1, 2, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],
	[3, 0, 3, 3, 0, 3, 0, 0, 3, 0, 1, 0, 0, 3, 0, 3, 3, 1, 3, 0, 3, 3, 3, 3, 1, 2, 3, 2, 1, 1, 3, 3, 0, 1, 1, 3, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],
	[3, 0, 3, 3, 0, 3, 0, 0, 3, 0, 1, 0, 0, 3, 0, 3, 3, 1, 3, 0, 3, 3, 3, 3, 1, 2, 3, 2, 1, 1, 3, 3, 0, 2, 1, 0, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],
	[3, 0, 3, 3, 0, 3, 0, 0, 3, 0, 1, 0, 0, 3, 0, 3, 3, 1, 3, 0, 3, 3, 3, 3, 1, 2, 3, 2, 1, 1, 3, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],
	[3, 0, 3, 3, 0, 3, 0, 0, 3, 0, 1, 0, 0, 3, 0, 3, 3, 1, 3, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],
	[3, 0, 3, 3, 0, 3, 0, 0, 3, 0, 1, 0, 0, 3, 0, 3, 0, 3, 0, 0, 3, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],
	[3, 0, 3, 3, 0, 3, 0, 0, 3, 0, 1, 0, 0, 3, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],
	[3, 0, 3, 3, 0, 3, 0, 0, 2, 1, 1, 1, 1, 2, 3, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],
	[3, 0, 3, 3, 0, 3, 0, 0, 1, 1, 3, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3] ,
	[3, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],
	[0, 1, 3, 0, 3, 3, 3, 3, 1, 0, 2, 0, 0, 1, 2, 2, 3, 0, 3, 3, 1, 3, 3, 3, 2, 3, 0, 3, 1, 1, 3, 2, 3, 2, 2, 0, 2, 2, 0, 3, 0, 2, 3, 0, 1, 0, 2, 0, 1, 0]
]

def generateNext(sequence, indices):   # inclusive of both begin and end
	carry=1
	i=len(indices)-1
	while carry==1 and i>=0:
		carry=0
		sequence[indices[i]]+=1
		if sequence[indices[i]]==4:
			sequence[indices[i]]=0
			carry=1
			i-=1
	#if i<begin:
	#	return None
	return sequence

#def battle(s1=[3, 0, 3, 3, 0, 3, 0, 0, 3, 0, 1, 0, 0, 3, 0, 3, 3, 1, 3, 0, 3, 3, 3, 3, 1, 2, 3, 2, 0, 2, 3, 0, 3, 2, 2, 2, 3, 0, 3, 0, 0, 0, 3, 3, 0, 1, 0, 3, 2, 0],s2=[3]*50):
def battle(s1,s2):
	(rounds,score1,score2) = _PyPacwar.scorebattle(s1,s2)
	#(rounds,c1,c2)=_PyPacwar.battle(s1,s2)
	return rounds,score1,score2

def rank(contenders,opFile):
	f = open(opFile, 'w')
	score=[(0,0)]*len(contenders)
	results=[]
	for i in range(0,len(contenders)):
		results+=[[]]
		for j in range(i+1,len(contenders)):
			print i,j
			rounds, score1,score2=battle(contenders[i],contenders[j])
			score[i]=(score1+score[i][0],contenders[i])
			score[j]=(score2+score[j][0],contenders[j])
			print "score:",score1,score2
			results[i]+=[(score1,score2)]
			#print results[i][j]
	f.write(str(len(contenders))+" contenders are:\n")
	for i in contenders:
		f.write(str(i)+'\n')
	f.write("\nResults:\n")
	for i in results:	
		f.write(str(i)+'\n')
	
	score.sort()
	f.write("\nSorted scores:\n")
	for i in score:	
		f.write(str(i)+'\n')
	best=[item[1] for item in score]
	best=best[20:]
	f.write("\nNew contenders:\n[")
	for i in best:	
		f.write(str(i)+',\n')
	f.write(']')
	f.close()
	sys.exit()
	
def localBrute(base,best,indices):
	candidate = generateNext(list(base),indices)
	i=0
	maxTotalScore=-1
	maxTotalScores=[]
	bestScores=[]
	maxCandidate=base
	#print "In local brute, base is : ",base
	while candidate!=base:
		if i%1000==0:
			print "i=",i
		i+=1
		candidateScores=[]
		testScores=[]
		for test in best:
			(rounds,score1,score2) = _PyPacwar.scorebattle(candidate, test[0][1])
			candidateScores+=[score1]
			testScores+=[score2]
		if sum(candidateScores)>maxTotalScore:
			maxTotalScores=candidateScores
			maxTotalScore=sum(maxTotalScores)
			maxCandidate=list(candidate)
			bestScores=testScores
			print candidate,maxTotalScore
		candidate=generateNext(candidate,indices)
		#print "Candidate is: ", candidate
	return maxCandidate,maxTotalScore,maxTotalScores,bestScores



def downSizeCurrentBest(currentBest,length):
	while len(currentBest)>length:	
		minIndex=currentBest.index(min(currentBest))
		print currentBest[minIndex]
		del currentBest[minIndex]
		for i in currentBest:
			i[0]=(i[0][0]-i[minIndex+1],i[0][1])
			del i[minIndex+1]

ranges=[range(0,12),range(4,16),range(8,20),range(12,24),range(16,28),range(20,32),range(24,36),range(28,40),range(32,44),range(38,50)]
rangeIndex=0
print rangeIndex
rangeIndexFlag=0
CONTENDER_LENGTH=4

def hasMoreRanges():
	if rangeIndex<len(ranges):
	#if rangeIndex<3:
		return True
	return False


def main():
	#battle()
	#rank(bestcontenders,"rank.txt")
	#sys.exit()
	#print battle([3, 3, 3, 3, 0, 2, 1, 0, 1, 1, 2, 2, 2, 2, 3, 2, 3, 0, 0, 3, 3, 2, 3, 3, 3, 3, 3, 3, 3, 0, 2, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 3, 1, 3, 3, 3, 0, 0, 0, 0],[3]*50)
	#sys.exit()
	
	global ranges, rangeIndex,rangeIndexFlag,CONTENDER_LENGTH
	
	currentBest=[[(0,[3]*50),0]]
	champ=0
	
	while hasMoreRanges():
		bestCandidate,bestCandidateScore,bestCandidateScores,currentBestScores=localBrute(currentBest[champ][0][1],currentBest,ranges[rangeIndex])
		if bestCandidate==[3]*50:
			print "Error"
		#print "In main:",currentBest,currentBestScores,bestCandidateScore
		print "In main bestCandidateScore: ",bestCandidateScore
		for i in range(0,len(currentBest)):
			currentBest[i][0] = (currentBestScores[i]+currentBest[i][0][0],currentBest[i][0][1])
			currentBest[i]+=[currentBestScores[i]]
		currentBest+=[[(bestCandidateScore,bestCandidate)]+bestCandidateScores+[0]]
		
		opFile=open("bestContenders.txt",'a')
		opFile.write("\n\nCurrent best:\n"+str(currentBest)+"\nRange: "+str(ranges[rangeIndex]))
		opFile.close()
		
		if len(currentBest)>CONTENDER_LENGTH:
			rangeIndex+=1
			if rangeIndexFlag==0:
				CONTENDER_LENGTH*=2
				rangeIndexFlag=1
			elif rangeIndexFlag==1:
				downSizeCurrentBest(currentBest,CONTENDER_LENGTH/2)
		champ=currentBest.index(max(currentBest))
		print "Currentbest: ",currentBest[champ]
	print "Final currentBest:\n"
	print currentBest
	
if __name__ == "__main__": main()
